package com.kustaurant.kustaurant.mock;

import com.kustaurant.kustaurant.post.post.domain.dto.UserDTO;
import com.kustaurant.kustaurant.user.user.domain.User;
import com.kustaurant.kustaurant.user.user.domain.vo.Nickname;
import com.kustaurant.kustaurant.user.user.domain.vo.PhoneNumber;
import com.kustaurant.kustaurant.user.user.service.port.UserRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;

public class FakeUserRepository implements UserRepository {

    private Long autoGeneratedId = 1L;
    private final List<User> data = new ArrayList<>();

    @Override
    public User getById(Long id) {
        return null;
    }

    @Override
    public Optional<User> findByProviderId(String providerId) {
        return Optional.empty();
    }

    @Override
    public Boolean existsByNickname(Nickname nickname) {
        return null;
    }

    @Override
    public Boolean existsByPhoneNumber(PhoneNumber phoneNumber) {
        return null;
    }

    @Override
    public Optional<User> findById(Long userId) {
        return data.stream().filter(item -> item.getId().equals(userId)).findAny();
    }

    @Override
    public User save(User user) {
        if (user.getId() == null || user.getId() == 0){
            User newUser=User.builder()
                    .id(autoGeneratedId++)
                    .providerId(user.getProviderId())
                    .loginApi(user.getLoginApi())
                    .nickname(user.getNickname())
                    .email(user.getEmail())
                    .phoneNumber(user.getPhoneNumber())
                    .status(user.getStatus())
                    .createdAt(user.getCreatedAt())
                    .role(user.getRole())
                    .build();
            data.add(newUser);
            return newUser;
        }else{
            data.removeIf(u->u.getId().equals(user.getId()));
            data.add(user);
            return user;
        }
    }

    @Override
    public List<User> findUsersWithEvaluationCountDescending() {
        return List.of();
    }

    @Override
    public List<User> findUsersByEvaluationCountForQuarter(int year, int quarter) {
        return List.of();
    }

    @Override
    public int countByLoginApi(String apple) {
        return 0;
    }

    @Override
    public Map<Long, UserDTO> getUserDTOMapByIds(List<Long> ids) {
        return Map.of();
    }

    @Override
    public List<User> findByIdIn(List<Long> ids) {
        return List.of();
    }
}
