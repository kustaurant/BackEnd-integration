package com.kustaurant.kustaurant.mock;

import com.kustaurant.kustaurant.post.domain.Post;
import com.kustaurant.kustaurant.post.enums.ContentStatus;
import com.kustaurant.kustaurant.post.infrastructure.PostEntity;
import com.kustaurant.kustaurant.post.service.port.PostRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

public class FakePostRepository implements PostRepository {
    private final AtomicInteger autoGeneratedId = new AtomicInteger(0);
    private final List<Post> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Optional<Post> findById(Integer id) {
        return data.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public Optional<Post> findByIdWithComments(Integer id) {
        return Optional.empty();
    }

    @Override
    public Post save(Post post) {
        if( post.getId() == null || post.getId() ==0 ){
            Post newPost = Post.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .authorId(post.getAuthorId())
                    .body(post.getBody())
                    .createdAt(post.getCreatedAt())
                    .updatedAt(post.getUpdatedAt())
                    .build();
            data.add(newPost);
            return newPost;
        }else{
            data.removeIf(item -> Objects.equals(item.getId(), post.getId()));
            data.add(post);
            return post;
        }
    }

    @Override
    public Page<Post> findAll(Specification<PostEntity> spec, Pageable pageable) {
        return null;
    }

    @Override
    public List<Post> findAllById(List<Integer> ids) {
        return List.of();
    }

    @Override
    public Page<Post> findByStatus(ContentStatus status, Pageable pageable) {
        return null;
    }

    @Override
    public void increaseVisitCount(Integer postId) {

    }

    @Override
    public void delete(Post post) {

    }

    @Override
    public List<Post> findActiveByUserId(Long userId) {
        return List.of();
    }

    @Override
    public Page<Post> findAll(Pageable pageable) {
        return null;
    }
    
    @Override
    public List<PostEntity> findActivePostsByUserId(Long userId) {
        return List.of();
    }

    @Override
    public Optional<PostEntity> findByStatusAndPostId(String status, Integer postId) {
        return Optional.empty();
    }

    @Override
    public PostEntity save(PostEntity postEntity) {
        return null;
    }
}
