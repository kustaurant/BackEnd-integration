package com.kustaurant.kustaurant.mock.post;

import com.kustaurant.kustaurant.post.post.domain.Post;
import com.kustaurant.kustaurant.post.post.domain.enums.PostStatus;
import com.kustaurant.kustaurant.post.post.infrastructure.entity.PostEntity;
import com.kustaurant.kustaurant.post.post.service.port.PostRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

public class FakePostRepository implements PostRepository {
    private final AtomicInteger autoGeneratedId = new AtomicInteger(0);
    private final List<Post> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Optional<Post> findById(Long id) {
        return data.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public Post save(Post post) {
        if( post.getId() == null || post.getId() ==0 ){
            Post newPost = Post.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .writerId(post.getWriterId())
                    .body(post.getBody())
                    .createdAt(post.getCreatedAt())
                    .updatedAt(post.getUpdatedAt())
                    .build();
            data.add(newPost);
            return newPost;
        }else{
            data.removeIf(item -> Objects.equals(item.getId(), post.getId()));
            data.add(post);
            return post;
        }
    }


    @Override
    public void delete(Integer id) {

    }

    @Override
    public void increaseVisitCount(Long postId) {

    }

}
