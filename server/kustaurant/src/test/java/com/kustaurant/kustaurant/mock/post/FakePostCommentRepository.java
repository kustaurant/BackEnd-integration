package com.kustaurant.kustaurant.mock.post;

import com.kustaurant.kustaurant.post.comment.domain.PostComment;
import com.kustaurant.kustaurant.post.comment.domain.PostCommentStatus;
import com.kustaurant.kustaurant.post.comment.service.port.PostCommentRepository;

import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;

public class FakePostCommentRepository implements PostCommentRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(1);
    private final Map<Long, PostComment> data = new ConcurrentHashMap<>();

    @Override
    public Optional<PostComment> findById(Long id) {
        if(id==null) return Optional.empty();
        return Optional.ofNullable(data.get(id));
    }

    @Override
    public Optional<PostComment> findByIdForUpdate(Long id) {
        return findById(id);
    }

    @Override
    public PostComment save(PostComment comment) {
        if (comment == null) throw new IllegalArgumentException("comment is null");
        long id = (comment.getId() != null)
                ? comment.getId()
                : autoGeneratedId.incrementAndGet();
        PostComment postComment = PostComment.builder()
                .id(id)
                .postId(comment.getPostId())
                .body(comment.getBody())
                .parentCommentId(comment.getParentCommentId())
                .status(comment.getStatus())
                .createdAt(comment.getCreatedAt())
                .updatedAt(comment.getUpdatedAt())
                .writerId(comment.getWriterId())
                .build();
        data.put(id, postComment);
        return postComment;
    }

    @Override
    public long countActiveRepliesByParentCommentId(Long parentCommentId) {
        if (parentCommentId == null) return 0L;
        return data.values().stream()
                .filter(pc -> Objects.equals(pc.getParentCommentId(), parentCommentId))
                .filter(pc -> pc.getStatus() == PostCommentStatus.ACTIVE)
                .count();
    }

    @Override
    public long countVisibleRepliesByPostId(Long postId) {
        return data.values().stream()
                .filter(pc -> Objects.equals(pc.getPostId(), postId))
                .filter(pc -> pc.getStatus() == PostCommentStatus.ACTIVE)
                .count();
    }

    @Override
    public void delete(PostComment comment) {
        if (comment == null || comment.getId() == null) return;
        data.remove(comment.getId());
    }

    @Override
    public void deleteByPostId(Long postId) {
        if (postId == null) return;
        data.values().removeIf(c -> Objects.equals(c.getPostId(), postId));
    }
}
