package com.kustaurant.mainapp.mock.post;

import com.kustaurant.mainapp.post.post.domain.Post;
import com.kustaurant.mainapp.post.post.domain.enums.PostStatus;
import com.kustaurant.mainapp.post.post.infrastructure.entity.PostEntity;
import com.kustaurant.mainapp.post.post.service.port.PostRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

public class FakePostRepository implements PostRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(1);
    private final Map<Long, Post> data = new ConcurrentHashMap<>();

    @Override
    public Optional<Post> findById(Long id) {
        return Optional.ofNullable(data.get(id));
    }

    @Override
    public Post save(Post post) {
        if( post.getId() == null || post.getId() ==0 ){
            long newId = autoGeneratedId.incrementAndGet();
            Post newPost = Post.builder()
                    .id(newId)
                    .title(post.getTitle())
                    .category(post.getCategory())
                    .writerId(post.getWriterId())
                    .body(post.getBody())
                    .createdAt(post.getCreatedAt())
                    .updatedAt(post.getUpdatedAt())
                    .visitCount(post.getVisitCount())
                    .build();
            data.put(newId, newPost);
            return newPost;
        }

        data.put(post.getId(), post);
        return post;
    }

    @Override
    public void delete(Long id) {
        data.remove(id);
    }

    @Override
    public void increaseVisitCount(Long postId) {
        data.compute(postId, (id,old)->{
            if(old==null) return null;

            int cur = Objects.requireNonNullElse(old.getVisitCount(), 0);
            return Post.builder()
                    .id(old.getId())
                    .writerId(old.getWriterId())
                    .body(old.getBody())
                    .createdAt(old.getCreatedAt())
                    .updatedAt(old.getUpdatedAt())
                    .visitCount(cur + 1)
                    .build();
        });
    }

}
